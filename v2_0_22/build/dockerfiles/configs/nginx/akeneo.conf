server {
	listen   80; ## listen for ipv4; this line is default and implied
	listen   [::]:80 default ipv6only=on; ## listen for ipv6

	root /home/akeneo/web;

	# Make site accessible from http://localhost/
	server_name {{DOMAIN}};

	# Disable sendfile as per https://docs.vagrantup.com/v2/synced-folders/virtualbox.html
	sendfile off;

	# Add stdout/stderr logging
    access_log /proc/self/fd/1;
    error_log /proc/self/fd/2;

    location ^~ /.well-known/acme-challenge/ {
        # No HTTP authentication
        allow all;

        # Set correct content type. According to this:
        # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
        # Current specification requires "text/plain" or no content header at all.
        # It seems that "text/plain" is a safe option.
        default_type "text/plain";

        # Change document root: this path will be given to certbot as the
        # `-w` param of the webroot plugin.
        root /tmp/{{DOMAIN}};
    }

    # Hide /acme-challenge subdirectory and return 404 on all requests.
    # It is somewhat more secure than letting Nginx return 403.
    # Ending slash is important!
    location = /.well-known/acme-challenge/ {
        return 404;
    }

	location / {
        # try to serve file directly, fallback to app.php
        try_files $uri /app.php$is_args$args;
    }


	error_page 404 /404.html;

    location = /404.html {
        root /var/www/errors;
        internal;
    }

    location ^~ /ngd-style.css {
        alias /var/www/errors/style.css;
        access_log off;
    }

    location ^~ /ngd-sad.svg {
        alias /var/www/errors/sad.svg;
        access_log off;
    }

    # PROD
    location ~ ^/app\.php(/|$) {

        # Uncomment if using UNIX socket
        #fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;
        fastcgi_pass  127.0.0.1:9000;

        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;

       # When you are using symlinks to link the document root to the
       # current version of your application, you should pass the real
       # application path instead of the path to the symlink to PHP
       # FPM.
       # Otherwise, PHP's OPcache may not properly detect changes to
       # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
       # for more information).
       fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
       fastcgi_param DOCUMENT_ROOT $realpath_root;
       # Prevents URIs that include the front controller. This will 404:
       # http://domain.tld/app.php/some-path
       # Remove the internal directive to allow URIs like this
       internal;
    }

   # return 404 for all other php files not matching the front controller
   # this prevents access to other php files you don't want to be accessible.
   location ~ \.php$ {
     	return 404;
   }


	# deny access to . files, for security
	#
	location ~ /\. {
    	log_not_found off;
    	deny all;
	}

}
